[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/classboost_1_1geometry_1_1index_1_1rtree.xml]
[#classboost_1_1geometry_1_1index_1_1rtree]
[section boost::geometry::index::rtree]

'''<indexterm><primary>boost</primary></indexterm><indexterm><primary>geometry</primary></indexterm><indexterm><primary>index</primary></indexterm><indexterm><primary>rtree</primary></indexterm>'''
The R-tree spatial index. 

[heading Description]
This is self-balancing spatial index capable to store various types of Values and balancing algorithms.

[heading Parameters]
The user must pass a type defining the Parameters which will be used in rtree creation process. This type is used e.g. to specify balancing algorithm with specific parameters like min and max number of elements in node.




Predefined algorithms with compile-time parameters are: 

* [^[link structboost_1_1geometry_1_1index_1_1linear boost::geometry::index::linear]], 
* [^[link structboost_1_1geometry_1_1index_1_1quadratic boost::geometry::index::quadratic]], 
* [^[link structboost_1_1geometry_1_1index_1_1rstar boost::geometry::index::rstar]].






Predefined algorithms with run-time parameters are: 

* [^[link classboost_1_1geometry_1_1index_1_1dynamic__linear boost::geometry::index::dynamic_linear]], 
* [^[link classboost_1_1geometry_1_1index_1_1dynamic__quadratic boost::geometry::index::dynamic_quadratic]], 
* [^[link classboost_1_1geometry_1_1index_1_1dynamic__rstar boost::geometry::index::dynamic_rstar]].



[heading Translator]
The Translator translates from Value to Indexable each time r-tree requires it. Which means that this operation is done for each Value access. Therefore the Translator should return the Indexable by const reference instead of a value. Default translator can translate all types adapted to Point or Box concepts (called Indexables). It also handles [^`std::pair<Indexable, T>`] and [^`boost::tuple<Indexable, ...>`]. For example, if [^`std::pair<Box, int>`] is stored in the container, the default translator translates from [^`std::pair<Box, int> const&`] to [^`Box const&`].

[heading Header]
`#include <boost/geometry/index/rtree.hpp>`

[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Parameters``,`
         `typename IndexableGetter` = [^[link structboost_1_1geometry_1_1index_1_1indexable index::indexable]]`<Value>``,`
         `typename EqualTo` = [^[link structboost_1_1geometry_1_1index_1_1equal__to index::equal_to]]`<Value>``,`
         `typename Allocator` = `std::allocator<Value>``>`
`class rtree`
`{`
`  // ...`
`};`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Value`][The type of objects stored in the container. ]]
[[`Parameters`][Compile-time parameters. ]]
[[`IndexableGetter`][The function object extracting Indexable from Value. ]]
[[`EqualTo`][The function object comparing objects of type Value. ]]
[[`Allocator`][The allocator used to allocate/deallocate memory, construct/destroy nodes and Values. ]]
]

[heading Typedef(s)]
[table
[[Type] [Description]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a5761a41d87b93d4fd548ecb6600ae757] `value_type`][The type of Value stored in the container. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17] `parameters_type`][R-tree parameters type. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e] `allocator_type`][The type of allocator used by the container. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4] `size_type`][Unsigned integral type used by the container. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5] `indexable_getter`][The function object extracting Indexable from Value. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b] `value_equal`][The function object comparing objects of type Value. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a28e88e55d260a454688fe1bd5e5af96b] `indexable_type`][The Indexable type to which Value is translated. ]]
[[[#classboost_1_1geometry_1_1index_1_1rtree_1a89a6fd9a7c24f9d30422ef81ce2b959f] `bounds_type`][The Box type used by the R-tree. ]]
]

[heading Constructor(s) and destructor]
[table
[[Function][Description]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a55d5fd5d205df08db5267253689ccf0c `rtree()`]][The constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a1a6b696d4855cbf1866196fe058c3a87 `rtree(parameters_type const &, indexable_getter const &, value_equal const &, allocator_type const &)`]][The constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a037f17d8a1dfa4a818ff471dec61c912 `rtree(Iterator, Iterator)`]][The constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a7b96b715c52ddc13d7a81db344825848 `rtree(Range const &)`]][The constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1af8db72811d2be53c409240204e63fb5a `~rtree()`]][The destructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a826fc3236e181ad718d5283e95d7866f `rtree(rtree const &)`]][The copy constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a72b6b75e083eea2ed26f54d4a2265375 `rtree(rtree const &, allocator_type const &)`]][The copy constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1aa8b27db8cb783282ab5274e6769da26a `rtree(rtree &&)`]][The moving constructor. ]]
[[[link classboost_1_1geometry_1_1index_1_1rtree_1a8508c4236d17ff39a1caef058aac8486 `rtree(rtree &&, allocator_type const &)`]][The moving constructor. ]]
]

[heading Member(s)]
[table
[[Modifier][Function][Description]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a278cfc791ab6c5ebc2f70aeb5b3428a1 `operator=(const rtree &)`]][The assignment operator. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1af0bf9622ed3e901580b73ed39b746fb7 `operator=(rtree &&)`]][The moving assignment. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1aedb719dfece91d298e9ee56878524c9b `swap(rtree &)`]][Swaps contents of two rtrees. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1ad47980467e66b8644df18a480dbf9d86 `insert(value_type const &)`]][Insert a value to the index. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a60d4c8790fd8810ff8b57f049e6bed8d `insert(Iterator, Iterator)`]][Insert a range of values to the index. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a39be117f85cc9ebc508d8ecf77578329 `insert(Range const &)`]][Insert a range of values to the index. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a1ce933b0b833faec5349bfc27bde15d4 `remove(value_type const &)`]][Remove a value from the container. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1aa97084231d17564a94f0142d095cecaa `remove(Iterator, Iterator)`]][Remove a range of values from the container. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a8a6460c186f595e91be69b1062ecae8b `remove(Range const &)`]][Remove a range of values from the container. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1a7baa88eb4e7a5c640ab847513de45b3e `query(Predicates const &, OutIter)`]][Finds values meeting passed predicates e.g. nearest to some Point and/or intersecting some Box. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1ac9f152c8c96525e3735b81635d8171b1 `size()`]][Returns the number of stored values. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1aa5302ce1c26105d722aac20793e83f0e `empty()`]][Query if the container is empty. ]]
[[][[link classboost_1_1geometry_1_1index_1_1rtree_1a1bec40977c175983f585c4488cf8fe3c `clear()`]][Removes all values stored in the container. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1a0dad06d0f117f45ed54b5c123cb41d6e `bounds()`]][Returns the box able to contain all values stored in the container. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1aaa834c241c191ac9de67f134564f36fa `count(ValueOrIndexable const &)`]][Count Values or Indexables stored in the container. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1a9076baef90a3a9c6018871fa25115a73 `parameters()`]][Returns parameters. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1af391fd642a218c5fb10fc68d643a62b5 `indexable_get()`]][Returns function retrieving Indexable from Value. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1a16424563d0973960ac01f7a1969eeebe `value_eq()`]][Returns function comparing Values. ]]
[[ `const`][[link classboost_1_1geometry_1_1index_1_1rtree_1a17d9cef211feb7f674a5b4602f4cc81e `get_allocator()`]][Returns allocator used by the rtree. ]]
]

[#classboost_1_1geometry_1_1index_1_1rtree_1a55d5fd5d205df08db5267253689ccf0c]
[section rtree()]
'''<indexterm><primary>rtree</primary></indexterm>'''
The constructor. 

[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &` `parameters` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &` `getter` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &` `equal` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]`()``)`
]

[heading Modifier(s)]
``explicit ``[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &`][ `parameters` ][The parameters object. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &`][ `getter` ][The function object extracting Indexable from Value. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &`][ `equal` ][The function object comparing Values.]]
]
[heading Throws]
If allocator default constructor throws. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a1a6b696d4855cbf1866196fe058c3a87]
[section rtree(parameters_type const &, indexable_getter const &, value_equal const &, allocator_type const &)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The constructor. 

[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &` `parameters``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &` `getter``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &` `equal``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &` `allocator``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &`][ `parameters` ][The parameters object. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &`][ `getter` ][The function object extracting Indexable from Value. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &`][ `equal` ][The function object comparing Values. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &`][ `allocator` ][The allocator object.]]
]
[heading Throws]
If allocator copy constructor throws. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a037f17d8a1dfa4a818ff471dec61c912]
[section rtree(Iterator, Iterator)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The constructor. 

[heading Synopsis]
[pre
`template<``typename Iterator``>`
`rtree``(``Iterator` `first``,`
      `Iterator` `last``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &` `parameters` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &` `getter` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &` `equal` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &` `allocator` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]`()``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Iterator`][ `first` ][The beginning of the range of Values. ]]
[[`Iterator`][ `last` ][The end of the range of Values. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &`][ `parameters` ][The parameters object. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &`][ `getter` ][The function object extracting Indexable from Value. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &`][ `equal` ][The function object comparing Values. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &`][ `allocator` ][The allocator object.]]
]
[heading Throws]


* If allocator copy constructor throws. 
* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When memory allocation for Node fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a7b96b715c52ddc13d7a81db344825848]
[section rtree(Range const &)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The constructor. 

[heading Synopsis]
[pre
`template<``typename Range``>`
`rtree``(``Range const &` `rng``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &` `parameters` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &` `getter` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &` `equal` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]`()``,`
      [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &` `allocator` = [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]`()``)`
]

[heading Modifier(s)]
``explicit ``[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Range const &`][ `rng` ][The range of Values. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]]` const &`][ `parameters` ][The parameters object. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]]` const &`][ `getter` ][The function object extracting Indexable from Value. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]]` const &`][ `equal` ][The function object comparing Values. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &`][ `allocator` ][The allocator object.]]
]
[heading Throws]


* If allocator copy constructor throws. 
* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When memory allocation for Node fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1af8db72811d2be53c409240204e63fb5a]
[section ~rtree()]
'''<indexterm><primary>~rtree</primary></indexterm>'''
The destructor. 

[heading Synopsis]
[pre

`~rtree``()`
]

[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a826fc3236e181ad718d5283e95d7866f]
[section rtree(rtree const &)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The copy constructor. 

[heading Description]
It uses parameters, translator and allocator from the source tree.[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` const &` `src``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` const &`][ `src` ][The rtree which content will be copied.]]
]
[heading Throws]


* If allocator copy constructor throws. 
* If Value copy constructor throws. 
* If allocation throws. 
* When memory allocation for Node fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a72b6b75e083eea2ed26f54d4a2265375]
[section rtree(rtree const &, allocator_type const &)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The copy constructor. 

[heading Description]
It uses Parameters and translator from the source tree.[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` const &` `src``,` [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &` `allocator``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` const &`][ `src` ][The rtree which content will be copied. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &`][ `allocator` ][The allocator which will be used.]]
]
[heading Throws]


* If allocator copy constructor throws. 
* If Value copy constructor throws. 
* If allocation throws. 
* When memory allocation for Node fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1aa8b27db8cb783282ab5274e6769da26a]
[section rtree(rtree &&)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The moving constructor. 

[heading Description]
It uses parameters, translator and allocator from the source tree.[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&` `src``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&`][ `src` ][The rtree which content will be moved.]]
]
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a8508c4236d17ff39a1caef058aac8486]
[section rtree(rtree &&, allocator_type const &)]
'''<indexterm><primary>rtree</primary></indexterm>'''
The moving constructor. 

[heading Description]
It uses parameters and translator from the source tree.[heading Synopsis]
[pre

`rtree``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&` `src``,` [^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &` `allocator``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&`][ `src` ][The rtree which content will be moved. ]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]]` const &`][ `allocator` ][The allocator.]]
]
[heading Throws]


* If allocator copy constructor throws. 
* If Value copy constructor throws (only if allocators aren't equal). 
* If allocation throws (only if allocators aren't equal). 
* When memory allocation for Node fails (only if allocators aren't equal). 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a278cfc791ab6c5ebc2f70aeb5b3428a1]
[section operator=(const rtree &)]
'''<indexterm><primary>operator=</primary></indexterm>'''
The assignment operator. 

[heading Description]
It uses parameters and translator from the source tree.[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &` `operator=``(``const `[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &` `src``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`const `[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &`][ `src` ][The rtree which content will be copied.]]
]
[heading Throws]


* If Value copy constructor throws. 
* If allocation throws. 
* When nodes allocation fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1af0bf9622ed3e901580b73ed39b746fb7]
[section operator=(rtree &&)]
'''<indexterm><primary>operator=</primary></indexterm>'''
The moving assignment. 

[heading Description]
It uses parameters and translator from the source tree.[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &` `operator=``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&` `src``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &&`][ `src` ][The rtree which content will be moved.]]
]
[heading Throws]
Only if allocators aren't equal. 

* If Value copy constructor throws. 
* If allocation throws. 
* When nodes allocation fails. 



[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1aedb719dfece91d298e9ee56878524c9b]
[section swap(rtree &)]
'''<indexterm><primary>swap</primary></indexterm>'''
Swaps contents of two rtrees. 

[heading Description]
Parameters, translator and allocators are swapped as well.[heading Synopsis]
[pre

`void` `swap``(`[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &` `other``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree rtree]]` &`][ `other` ][The rtree which content will be swapped with this rtree content.]]
]
[heading Throws]
If allocators swap throws. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1ad47980467e66b8644df18a480dbf9d86]
[section insert(value_type const &)]
'''<indexterm><primary>insert</primary></indexterm>'''
Insert a value to the index. 

[heading Synopsis]
[pre

`void` `insert``(`[^[link classboost_1_1geometry_1_1index_1_1rtree_1a5761a41d87b93d4fd548ecb6600ae757 value_type]]` const &` `value``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a5761a41d87b93d4fd548ecb6600ae757 value_type]]` const &`][ `value` ][The value which will be stored in the container.]]
]
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a60d4c8790fd8810ff8b57f049e6bed8d]
[section insert(Iterator, Iterator)]
'''<indexterm><primary>insert</primary></indexterm>'''
Insert a range of values to the index. 

[heading Synopsis]
[pre
`template<``typename Iterator``>`
`void` `insert``(``Iterator` `first``,` `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values.]]
]
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a39be117f85cc9ebc508d8ecf77578329]
[section insert(Range const &)]
'''<indexterm><primary>insert</primary></indexterm>'''
Insert a range of values to the index. 

[heading Synopsis]
[pre
`template<``typename Range``>`
`void` `insert``(``Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Range const &`][ `rng` ][The range of values.]]
]
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a1ce933b0b833faec5349bfc27bde15d4]
[section remove(value_type const &)]
'''<indexterm><primary>remove</primary></indexterm>'''
Remove a value from the container. 

[heading Description]
In contrast to the [^`std::set`] or [^`std::map erase()`] method this method removes only one value from the container.[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `remove``(`[^[link classboost_1_1geometry_1_1index_1_1rtree_1a5761a41d87b93d4fd548ecb6600ae757 value_type]]` const &` `value``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[[^[link classboost_1_1geometry_1_1index_1_1rtree_1a5761a41d87b93d4fd548ecb6600ae757 value_type]]` const &`][ `value` ][The value which will be removed from the container.]]
]
[heading Returns]
1 if the value was removed, 0 otherwise.
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1aa97084231d17564a94f0142d095cecaa]
[section remove(Iterator, Iterator)]
'''<indexterm><primary>remove</primary></indexterm>'''
Remove a range of values from the container. 

[heading Description]
In contrast to the [^`std::set`] or [^`std::map erase()`] method it doesn't take iterators pointing to values stored in this container. It removes values equal to these passed as a range. Furthermore this method removes only one value for each one passed in the range, not all equal values.[heading Synopsis]
[pre
`template<``typename Iterator``>`
[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `remove``(``Iterator` `first``,` `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values.]]
]
[heading Returns]
The number of removed values.
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a8a6460c186f595e91be69b1062ecae8b]
[section remove(Range const &)]
'''<indexterm><primary>remove</primary></indexterm>'''
Remove a range of values from the container. 

[heading Description]
In contrast to the [^`std::set`] or [^`std::map erase()`] method it removes values equal to these passed as a range. Furthermore, this method removes only one value for each one passed in the range, not all equal values.[heading Synopsis]
[pre
`template<``typename Range``>`
[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `remove``(``Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Range const &`][ `rng` ][The range of values.]]
]
[heading Returns]
The number of removed values.
[heading Throws]


* If Value copy constructor or copy assignment throws. 
* If allocation throws. 
* When nodes allocation fails.



[warning This operation is not thread safe. If it throws, the R-tree may be left in an inconsistent state, elements must not be inserted or removed, methods may return invalid data. ]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a7baa88eb4e7a5c640ab847513de45b3e]
[section query(Predicates const &, OutIter)]
'''<indexterm><primary>query</primary></indexterm>'''
Finds values meeting passed predicates e.g. nearest to some Point and/or intersecting some Box. 

[heading Description]
This query function performs spatial and k-nearest neighbor searches. It allows to pass a set of predicates. Values will be returned only if all predicates are met.

[*Spatial predicates]

Spatial predicates may be generated by one of the functions listed below: 

* [^[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]], 
* [^[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]],


It is possible to negate spatial predicates: 

* [^`! `[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^`! `[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^`! `[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]], 
* [^`! `[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^`! `[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]]

[*Satisfies predicate]

This is a special kind of predicate which allows to pass a user-defined function or function object which checks if Value should be returned by the query. It's generated by: 

* [^[link group__predicates_1gae7e9291c5b99041fb155d29de0860bab boost::geometry::index::satisfies()]].

[*Nearest predicate]

If the nearest predicate is passed a k-nearest neighbor search will be performed. This query will result in returning k values to the output iterator. Only one nearest predicate may be passed to the query. It may be generated by: 

* [^[link group__predicates_1gae80a2c204673a8b11c4fc137cfff6556 boost::geometry::index::nearest()]].

[*Connecting predicates]

Predicates may be passed together connected with [^`operator&&()`].[heading Synopsis]
[pre
`template<``typename Predicates``,` `typename OutIter``>`
[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `query``(``Predicates const &` `predicates``,` `OutIter` `out_it``)`
]

[heading Modifier(s)]
``const ``[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Predicates const &`][ `predicates` ][Predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator, e.g. generated by std::back_inserter().]]
]
[heading Returns]
The number of values found. 
[heading Example]

``
// return elements intersecting box
tree.query(bgi::intersects(box), std::back_inserter(result));
// return elements intersecting poly but not within box
tree.query(bgi::intersects(poly) && !bgi::within(box), std::back_inserter(result));
// return elements overlapping box and meeting my_fun unary predicate
tree.query(bgi::overlaps(box) && bgi::satisfies(my_fun), std::back_inserter(result));
// return 5 elements nearest to pt and elements are intersecting box
tree.query(bgi::nearest(pt, 5) && bgi::intersects(box), std::back_inserter(result));
// return 5 elements which centroids are nearest to pt and elements aren't within box
tree.query(bgi::nearest(bgi::to_centroid(pt), 5) && !bgi::within(box), std::back_inserter(result));
``


[heading Throws]
If Value copy constructor or copy assignment throws.

[warning Only one [^[link group__predicates_1gae80a2c204673a8b11c4fc137cfff6556 nearest()]] perdicate may be passed to the query.]

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1ac9f152c8c96525e3735b81635d8171b1]
[section size()]
'''<indexterm><primary>size</primary></indexterm>'''
Returns the number of stored values. 

[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `size``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The number of stored values.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1aa5302ce1c26105d722aac20793e83f0e]
[section empty()]
'''<indexterm><primary>empty</primary></indexterm>'''
Query if the container is empty. 

[heading Synopsis]
[pre

`bool` `empty``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
true if the container is empty.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a1bec40977c175983f585c4488cf8fe3c]
[section clear()]
'''<indexterm><primary>clear</primary></indexterm>'''
Removes all values stored in the container. 

[heading Synopsis]
[pre

`void` `clear``()`
]

[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a0dad06d0f117f45ed54b5c123cb41d6e]
[section bounds()]
'''<indexterm><primary>bounds</primary></indexterm>'''
Returns the box able to contain all values stored in the container. 

[heading Description]
Returns the box able to contain all values stored in the container. If the container is empty the result of [^`geometry::assign_inverse()`] is returned.[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1a89a6fd9a7c24f9d30422ef81ce2b959f bounds_type]] `bounds``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The box able to contain all values stored in the container or an invalid box if there are no values in the container.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1aaa834c241c191ac9de67f134564f36fa]
[section count(ValueOrIndexable const &)]
'''<indexterm><primary>count</primary></indexterm>'''
Count Values or Indexables stored in the container. 

[heading Description]
For indexable_type it returns the number of values which indexables equals the parameter. For value_type it returns the number of values which equals the parameter.[heading Synopsis]
[pre
`template<``typename ValueOrIndexable``>`
[^[link classboost_1_1geometry_1_1index_1_1rtree_1a4b7187ed28a9035d68b2f7125ffae5b4 size_type]] `count``(``ValueOrIndexable const &` `vori``)`
]

[heading Modifier(s)]
``const ``[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`ValueOrIndexable const &`][ `vori` ][The value or indexable which will be counted.]]
]
[heading Returns]
The number of values found.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a9076baef90a3a9c6018871fa25115a73]
[section parameters()]
'''<indexterm><primary>parameters</primary></indexterm>'''
Returns parameters. 

[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1a80db5532eb59f7a809bd44ded265eb17 parameters_type]] `parameters``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The parameters object.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1af391fd642a218c5fb10fc68d643a62b5]
[section indexable_get()]
'''<indexterm><primary>indexable_get</primary></indexterm>'''
Returns function retrieving Indexable from Value. 

[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1a43a7adb311cafc08e23010ccb4e97fb5 indexable_getter]] `indexable_get``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The indexable_getter object.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a16424563d0973960ac01f7a1969eeebe]
[section value_eq()]
'''<indexterm><primary>value_eq</primary></indexterm>'''
Returns function comparing Values. 

[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1ad8fe544de514014a1bd87ea1b881ff9b value_equal]] `value_eq``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The value_equal function.
[heading Throws]
Nothing. 

[endsect]

[#classboost_1_1geometry_1_1index_1_1rtree_1a17d9cef211feb7f674a5b4602f4cc81e]
[section get_allocator()]
'''<indexterm><primary>get_allocator</primary></indexterm>'''
Returns allocator used by the rtree. 

[heading Synopsis]
[pre

[^[link classboost_1_1geometry_1_1index_1_1rtree_1ab6618b5c7e88ed70533233fbac0f5b2e allocator_type]] `get_allocator``()`
]

[heading Modifier(s)]
``const ``[heading Returns]
The allocator.
[heading Throws]
If allocator copy constructor throws. 

[endsect]

[endsect]

