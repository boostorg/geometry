[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2009-2011 Barend Gehrels, Geodan, Amsterdam, the Netherlands.
  Copyright (c) 2009-2011 Mateusz Loskot (mateusz@loskot.net)
  Copyright (c) 2009-2011 Bruno Lalande, Paris, France.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__union.xml]
[section:union_ union_]

Combines two geometries which each other. 

[heading Description]
The free function union calculates the spatial set theoretic union of two geometries. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Collection>
void union_(Geometry1 const & geometry1, Geometry2 const & geometry2, Collection & output_collection)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[Collection &] [output collection, either a multi-geometry, or a std::vector<Geometry> / std::deque<Geometry> etc ] [output_collection] [the output collection ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`

[include ref/algorithms/union.qbk]


[endsect]

[section:union_inserter_3 union_inserter]



[heading Description]
Calculate the union of two geometries

The free function union\u005finserter calculates the spatial set theoretic union of two geometries. This version with the \u005finserter suffix outputs the union to an output iterator, and a template parameter must therefore be specified in the call. 

[heading Synopsis]
``template<typename GeometryOut, typename Geometry1, typename Geometry2, typename OutputIterator>
OutputIterator union_inserter(Geometry1 const & geometry1, Geometry2 const & geometry2, OutputIterator out)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[GeometryOut] [output geometry type, must be specified ] [ - ] [Must be specified]]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[OutputIterator] [output iterator ] [out] [The output iterator, to which union geometries are feeded ]]
]


[heading Returns]
The output iterator 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`


[endsect]

[section:union_inserter_4_with_strategy union_inserter (with strategy)]



[heading Description]
Calculate the union of two geometries using the specified strategy

The free function union\u005finserter calculates the spatial set theoretic union of two geometries using the specified strategy. details\u005finserter{union} 

[heading Synopsis]
``template<typename GeometryOut, typename Geometry1, typename Geometry2, typename OutputIterator, typename Strategy>
OutputIterator union_inserter(Geometry1 const & geometry1, Geometry2 const & geometry2, OutputIterator out, Strategy const & strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[GeometryOut] [output geometry type, must be specified ] [ - ] [Must be specified]]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[OutputIterator] [output iterator ] [out] [The output iterator, to which union geometries are feeded ]]
[[Strategy const &] [Compound strategy for segment intersection ] [strategy] [The strategy which will be used for union calculations ]]
]


[heading Returns]
The output iterator

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`


[endsect]

