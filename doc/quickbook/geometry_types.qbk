[/==============================================================================
    Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
    Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
    Copyright (c) 2009-2012 Mateusz Loskot, London, UK., London, UK

    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:types Geometry Types]

Boost.Geometry provides a collection of geometry models as class templates and their
specializations.

[section Points]

[section point]

__model_point__ is a data type for 0-dimensional mathematical object, point, specified in
n-dimensional Euclidean space using n coordinates defined in a neutral way. ['TODO: What does the "neutral way" mean? --mloskot]

[h4 Header]

    #include <boost/geometry/geometries/point.hp>

[h4 Synopsis]

    namespace boost { namespace geometry {

        template<typename T, std::size_t D, typename C>
        class point
        {
            point();
            point(T const& v0, T const& v1 = 0, T const& v2 = 0);

            template <std::size_t K>
            T const& get() const;

            template <std::size_t K>
            void set(T value);
        };
  }}

[h4 Template Parameters]

[table
  [[Parameter] [Requirement] [Description]]
  [[T] [] [Type of numeric coordinates. For example `double`, `float`, `int`, a type of
        arbitrary-precision arithmetic provided by __boost_numericadaptor__]]
  [[D] [`0 < D`] [Value of number of coordinate space dimensions. For example `2` for two-dimensional plane]]
  [[C] [] [Type of coordinate system. For example `boost::geometry::cs::cartesian`]]
  [[K] [`0 < K < D`] [Value identifying coordiante nth-dimension of D dimensions.]]
]

[h4 Model of]

__concept_point__

[h4 Description]

    point();

[*Effects:] Constructs an object of the class point, no initialization of coordinate values occurs.

    point(T const& v0, T const& v1 = 0, T const& v2 = 0);

[*Effects:] Constructs an object of the class point with initialization of all three coordinate values.

    template <std::size_t K>
    T const& get() const;

[*Requires:] Value `K` is less-than value `D` specified as the class template parameter.

[*Effects:] Returns value of K-th coordinate of the point object.

    template <std::size_t K>
    void set(T value);

[*Requires:] Value `K` is less-than value `D` specified as the class template parameter.

[*Effects:] Sets value of K-th coordinate in the point object.

[h4 Example]

    // create point object
    point<double, 2, cs::cartesian> p;
    // set coordinate values
    p.set<0>(1.0);
    p.set<1>(2.0);
    // query coordinates
    double r = p.get<0>();
    double i = p.get<1>();

[endsect] [/ end of section point]

[section point_xy]

__model_point_xy__ is a data type for 0-dimensional mathematical object, point, specified in
two-dimensional Euclidean space using two coordinates, `x` and `y`.

[h4 Header]

    #include <boost/geometry/geometries/point_xy.hpp>

[h4 Synopsis]

    namespace boost { namespace geometry {

        template<typename T, typename C = cs::cartesian>
        class point_xy
        {
            point_xy();
            point_xy(T const& x, T const& y);

            T const& get<0>() const;
            T const& get<1>() const;

            void set<0>(T value);
            void set<1>(T value);

            T const& x() const
            T const& y() const;

            void x(T const& v);
            void y(T const& v);
        };
    }}

[h4 Template Parameters]

[table
  [[Parameter] [Requirement] [Description]]
  [[T] [] [Type of numeric coordinates. For example `double`, `float`, `int`, a type of
        arbitrary-precision arithmetic provided by __boost_numericadaptor__]]
  [[C] [] [Type of coordinate system. For example `boost::geometry::cs::cartesian`]]
]

[h4 Model of]

__concept_point__

[h4 Description]

    point_xy();

[*Effects:] Constructs an object of the class point_xy, no initialization of coordinate values occurs.

    point_xy(T const& x, T const& y);

[*Effects:] Constructs an object of the class point_xy with initialization of both coordinate values.

    T const& get<0>() const;

[*Effects:] Returns value, of the first coordinate of the point object, namely of the `x` coordinate.

    T const& get<1>() const;

[*Effects:] Returns value, of the second coordinate of the point object, namely of the `y` coordinate.

    void set<0>(T value);

[*Effects:] Sets value, of the first coordinate of the point object, namely of the `x` coordinate.

    void set<1>(T value);

[*Effects:] Sets value, of the second coordinate of the point object, namely of the `y` coordinate.

    T const& x() const;

[*Effects:] Returns value, of the first coordinate of the point object, namely of the `x`
coordinate. Named accessor provided for convenience, uses `get<0>()`.

    T const& y() const;

[*Effects:] Returns value, of the second coordinate of the point object, namely of the `y`
coordinate. Named accessor provided for convenience, uses `get<1>()`.

    void x(T const& v);

[*Effects:] Sets value, of the first coordinate of the point object, namely of the `x` coordinate.
Named accessor provided for convenience, uses `set<0>()`.

    void y(T const& v);

[*Effects:] Sets value, of the second coordinate of the point object, namely of the `y` coordinate.
Named accessor provided for convenience, uses `set<1>()`.

[h4 Example]

    // create object with initialized coordinates
    point_xy<int> p(5, 7);
    // query coordinates
    int x = p.get<0>();
    int y = p.get<1>();

[endsect] [/ end of section point_xy]

[endsect] [/ end of section Points]

[section Lines]
['TODO: built-in line types...]
[endsect]

[section Polygons]
['TODO: built-in polygon types...]
[endsect]

[endsect] [/ end of section Geometry Types]
