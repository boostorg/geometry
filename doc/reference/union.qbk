[/ Generated by doxygen_xml2qbk, don't change, it will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__union.xml]
[section:union_ union_]

Combines two geometries which each other. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Collection>
void union_ (Geometry1 const &geometry1, Geometry2 const &geometry2, Collection &output_collection)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[Collection &] [output collection, either a multi-geometry, or a std::vector<Geometry> / std::deque<Geometry> etc ] [output_collection] [the output collection ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`


[endsect]

[section:union_inserter_3 union_inserter]

Combines two geometries which each other. 

[heading Synopsis]
``template<typename GeometryOut, typename Geometry1, typename Geometry2, typename OutputIterator>
OutputIterator union_inserter (Geometry1 const &geometry1, Geometry2 const &geometry2, OutputIterator out)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[GeometryOut] [output geometry type, must be specified ] [ - ] [Must be specified]]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[OutputIterator] [output iterator ] [out] [the output iterator, outputting polygons ]]
]


[heading Returns]
the output iterator 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`


[endsect]

[section:union_inserter_4 union_inserter]

Combines two geometries which each other. 

[heading Synopsis]
``template<typename GeometryOut, typename Geometry1, typename Geometry2, typename OutputIterator, typename Strategy>
OutputIterator union_inserter (Geometry1 const &geometry1, Geometry2 const &geometry2, OutputIterator out, Strategy const &strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[GeometryOut] [output geometry type, must be specified ] [ - ] [Must be specified]]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[OutputIterator] [output iterator ] [out] [the output iterator, outputting polygons ]]
[[Strategy const &] [compound strategy for intersection ] [strategy] [the strategy ]]
]


[heading Returns]
the output iterator 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/union.hpp>`


[endsect]

