[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2009-2011 Barend Gehrels, Geodan, Amsterdam, the Netherlands.
  Copyright (c) 2009-2011 Mateusz Loskot (mateusz@loskot.net)
  Copyright (c) 2009-2011 Bruno Lalande, Paris, France.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk, don't change, it will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__arithmetic.xml]
[section:add_point add_point]

Adds a point to another. 

[heading Description]
The coordinates of the second point will be added to those of the first point. The second point is not modified. 

[heading Synopsis]
``template<typename Point1, typename Point2>
void add_point (Point1 &p1, Point2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point1 &] [] [p1] [first point ]]
[[Point2 const &] [] [p2] [second point ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:add_value add_value]

Adds a value to each coordinate of a point. 

[heading Synopsis]
``template<typename Point>
void add_value (Point &p, typename detail::param< Point >::type value)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point &] [] [p] [point ]]
[[typename detail::param< Point >::type] [] [value] [value to add ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:cross_product cross_product]

Computes the cross product of two vector. 

[heading Description]
Both vectors shall be of the same type. This type also determines type of result vector.

[heading Synopsis]
``template<typename P1, typename P2>
P1 cross_product (P1 const &p1, P2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[P1 const &] [] [p1] [first vector ]]
[[P2 const &] [] [p2] [second vector ]]
]


[heading Returns]
the cross product vector 

[heading Header]
`#include <boost/geometry/arithmetic/cross_product.hpp>`


[endsect]

[section:divide_point divide_point]

Divides a point by another. 

[heading Description]
The coordinates of the second point will be divided by those of the first point. The second point is not modified. 

[heading Synopsis]
``template<typename Point1, typename Point2>
void divide_point (Point1 &p1, Point2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point1 &] [] [p1] [first point ]]
[[Point2 const &] [] [p2] [second point ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:divide_value divide_value]

Divides each coordinate of a point by a value. 

[heading Synopsis]
``template<typename Point>
void divide_value (Point &p, typename detail::param< Point >::type value)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point &] [] [p] [point ]]
[[typename detail::param< Point >::type] [] [value] [value to divide by ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:dot_product dot_product]

Computes the dot product (or scalar product) of 2 vectors (points). 

[heading Synopsis]
``template<typename P1, typename P2>
select_coordinate_type<P1, P2>::type dot_product (P1 const &p1, P2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[P1 const &] [] [p1] [first point ]]
[[P2 const &] [] [p2] [second point ]]
]


[heading Returns]
the dot product 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/dot_product.hpp>`


[endsect]

[section:multiply_point multiply_point]

Multiplies a point by another. 

[heading Description]
The coordinates of the second point will be multiplied by those of the first point. The second point is not modified. 

[heading Synopsis]
``template<typename Point1, typename Point2>
void multiply_point (Point1 &p1, Point2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point1 &] [] [p1] [first point ]]
[[Point2 const &] [] [p2] [second point ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:multiply_value multiply_value]

Multiplies each coordinate of a point by a value. 

[heading Synopsis]
``template<typename Point>
void multiply_value (Point &p, typename detail::param< Point >::type value)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point &] [] [p] [point ]]
[[typename detail::param< Point >::type] [] [value] [value to multiply by ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:subtract_point subtract_point]

Subtracts a point to another. 

[heading Description]
The coordinates of the second point will be subtracted to those of the first point. The second point is not modified. 

[heading Synopsis]
``template<typename Point1, typename Point2>
void subtract_point (Point1 &p1, Point2 const &p2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point1 &] [] [p1] [first point ]]
[[Point2 const &] [] [p2] [second point ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

[section:subtract_value subtract_value]

Subtracts a value to each coordinate of a point. 

[heading Synopsis]
``template<typename Point>
void subtract_value (Point &p, typename detail::param< Point >::type value)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Point &] [] [p] [point ]]
[[typename detail::param< Point >::type] [] [value] [value to subtract ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/arithmetic/arithmetic.hpp>`


[endsect]

