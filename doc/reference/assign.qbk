[/ Generated by doxygen_xml2qbk, don't change, it will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__assign.xml]
[section:assign_2 assign]

assign a range of points to a linestring, ring or polygon 

[heading Synopsis]
``template<typename Geometry, typename Range>
void assign (Geometry &geometry, Range const &range)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [] [geometry] []]
[[Range const &] [] [range] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_5 assign]

assign center + radius to a sphere [for extension] 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign (Geometry &geometry, Type const &c1, Type const &c2, Type const &c3, Type const &c4)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [] [geometry] []]
[[Type const &] [] [c1] []]
[[Type const &] [] [c2] []]
[[Type const &] [] [c3] []]
[[Type const &] [] [c4] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_4 assign]

assign three values to a 3D point [or the center + radius to a circle] 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign (Geometry &geometry, Type const &c1, Type const &c2, Type const &c3)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [] [geometry] []]
[[Type const &] [] [c1] []]
[[Type const &] [] [c2] []]
[[Type const &] [] [c3] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_3 assign]

assign two values to a 2D point 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign (Geometry &geometry, Type const &c1, Type const &c2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [] [geometry] []]
[[Type const &] [] [c1] []]
[[Type const &] [] [c2] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_box_corners assign_box_corners]

Assign the 4 points of a 2D box. 

[heading Synopsis]
``template<typename Box, typename Point>
void assign_box_corners (Box const &box, Point &lower_left, Point &lower_right, Point &upper_left, Point &upper_right)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Box const &] [] [box] []]
[[Point &] [] [lower_left] []]
[[Point &] [] [lower_right] []]
[[Point &] [] [upper_left] []]
[[Point &] [] [upper_right] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_inverse assign_inverse]

assign to a box inverse infinite 

[heading Description]
The assign_inverse function initialize a 2D or 3D box with large coordinates, the min corner is very large, the max corner is very small. This is a convenient starting point to collect the minimum bounding box of a geometry. 

[heading Synopsis]
``template<typename Geometry>
void assign_inverse (Geometry &geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [] [geometry] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_point_from_index assign_point_from_index]

Assign a point with a point of a box or segment. 

[heading Synopsis]
``template<std::size_t Index, typename Point, typename Geometry>
void assign_point_from_index (Geometry const &geometry, Point &point)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Index] [indicates which box-corner, min_corner (0) or max_corner (1) or which point of segment (0/1) ] [ - ] [Must be specified]]
[[Geometry const &] [] [geometry] []]
[[Point &] [] [point] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_point_to_index assign_point_to_index]

Assign a box or segment with the value of a point. 

[heading Synopsis]
``template<std::size_t Index, typename Geometry, typename Point>
void assign_point_to_index (Point const &point, Geometry &geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Index] [indicates which box-corner, min_corner (0) or max_corner (1) or which point of segment (0/1) ] [ - ] [Must be specified]]
[[Point const &] [] [point] []]
[[Geometry &] [] [geometry] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_zero assign_zero]

assign zero values to a box, point 

[heading Description]
The assign_zero function initializes a 2D or 3D point or box with coordinates of zero 

[heading Synopsis]
``template<typename Geometry>
void assign_zero (Geometry &geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [the geometry type ] [geometry] []]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:copy_coordinates copy_coordinates]

Copies coordinates from source to destination point. 

[heading Description]
The function copy_coordinates copies coordinates from one point to another point. Source point and destination point might be of different types. 

[heading Synopsis]
``template<typename Src, typename Dst>
void copy_coordinates (Src const &source, Dst &dest)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Src const &] [] [source] [Source point ]]
[[Dst &] [] [dest] [Destination point ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/util/copy.hpp>`


[endsect]

