[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2009-2011 Barend Gehrels, Geodan, Amsterdam, the Netherlands.
  Copyright (c) 2009-2011 Mateusz Loskot (mateusz@loskot.net)
  Copyright (c) 2009-2011 Bruno Lalande, Paris, France.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__assign.xml]
[section:assign_2_with_a_range assign (with a range)]

Assign a range of points to a linestring, ring or polygon. 

[heading Synopsis]
``template<typename Geometry, typename Range>
void assign(Geometry & geometry, Range const & range)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept ]]
[[Range const &] [Any type fulfilling a Range Concept where it range_value type fulfills the Point Concept ] [range] [A range containg points fulfilling range and point concepts]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_with_range] [assign_with_range_output]

[heading See also]
* [link geometry.reference.algorithms.make.make_1_with_a_range make]


[endsect]

[section:assign_5_4_coordinate_values assign (4 coordinate values)]

Assign four values to a geometry (usually a box or segment). 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign(Geometry & geometry, Type const & c1, Type const & c2, Type const & c3, Type const & c4)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c1] [First coordinate (usually x1) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c2] [Second coordinate (usually y1) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c3] [Third coordinate (usually x2) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c4] [Fourth coordinate (usually y2)]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

[section:assign_4_3_coordinate_values assign (3 coordinate values)]

Assign three values to a geometry (usually a 3D point). 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign(Geometry & geometry, Type const & c1, Type const & c2, Type const & c3)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c1] [First coordinate (usually x-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c2] [Second coordinate (usually y-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c3] [Third coordinate (usually z-coordinate)]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_3d_point] [assign_3d_point_output]

[heading See also]
* [link geometry.reference.algorithms.make.make_3_3_coordinate_values make]


[endsect]

[section:assign_3_2_coordinate_values assign (2 coordinate values)]

Assign two coordinates to a geometry (usually a 2D point). 

[heading Synopsis]
``template<typename Geometry, typename Type>
void assign(Geometry & geometry, Type const & c1, Type const & c2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c1] [First coordinate (usually x-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c2] [Second coordinate (usually y-coordinate)]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_2d_point] [assign_2d_point_output]

[heading See also]
* [link geometry.reference.algorithms.make.make_2_2_coordinate_values make]


[endsect]

[section:assign_box_corners assign_box_corners]

Assign the four points of a 2D box. 

[heading Synopsis]
``template<typename Box, typename Point>
void assign_box_corners(Box const & box, Point & lower_left, Point & lower_right, Point & upper_left, Point & upper_right)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Box const &] [Any type fulfilling a Box Concept ] [box] [A model of the specified Box Concept ]]
[[Point &] [Any type fulfilling a Point Concept ] [lower_left] [point being assigned to lower left coordinates of the box ]]
[[Point &] [Any type fulfilling a Point Concept ] [lower_right] [point being assigned to lower right coordinates of the box ]]
[[Point &] [Any type fulfilling a Point Concept ] [upper_left] [point being assigned to upper left coordinates of the box ]]
[[Point &] [Any type fulfilling a Point Concept ] [upper_right] [point being assigned to upper right coordinates of the box]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_box_corners] [assign_box_corners_output]


[endsect]

[section:assign_inverse assign_inverse]

assign to a box inverse infinite 

[heading Description]
The assign_inverse function initialize a 2D or 3D box with large coordinates, the min corner is very large, the max corner is very small. This is a convenient starting point to collect the minimum bounding box of a geometry.

[heading Synopsis]
``template<typename Geometry>
void assign_inverse(Geometry & geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_inverse] [assign_inverse_output]

[heading See also]
* [link geometry.reference.algorithms.make.make_inverse make]


[endsect]

[section:assign_point_from_index assign_point_from_index]

Assign a point with a point of a box or segment. 

[heading Synopsis]
``template<std::size_t Index, typename Point, typename Geometry>
void assign_point_from_index(Geometry const & geometry, Point & point)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Index] [indicates which box-corner, min_corner (0) or max_corner (1) or which point of segment (0/1) ] [ - ] [Must be specified]]
[[Geometry const &] [Any type fulfilling a Box Concept or a Segment Concept ] [geometry] [A box modelling the specified Box Concept or segment modelling the specified Segment Concept ]]
[[Point &] [Any type fulfilling a Point Concept ] [point] [A model of the specified Point Concept]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_point_from_index] [assign_point_from_index_output]


[endsect]

[section:assign_point_to_index assign_point_to_index]

Assign a box or segment with the value of a point. 

[heading Synopsis]
``template<std::size_t Index, typename Geometry, typename Point>
void assign_point_to_index(Point const & point, Geometry & geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Index] [indicates which box-corner, min_corner (0) or max_corner (1) or which point of segment (0/1) ] [ - ] [Must be specified]]
[[Point const &] [Any type fulfilling a Point Concept ] [point] [A model of the specified Point Concept ]]
[[Geometry &] [Any type fulfilling a Box Concept or a Segment Concept ] [geometry] [A box modelling the specified Box Concept or segment modelling the specified Segment Concept]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`

[heading Example]
[assign_point_to_index] [assign_point_to_index_output]


[endsect]

[section:assign_zero assign_zero]

assign zero values to a box, point 

[heading Description]
The assign_zero function initializes a 2D or 3D point or box with coordinates of zero 

[heading Synopsis]
``template<typename Geometry>
void assign_zero(Geometry & geometry)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry &] [Any type fulfilling a Geometry Concept ] [geometry] [A model of the specified concept ]]
]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/assign.hpp>`


[endsect]

