[section:distance_3 distance (3)]

Calculate distance between two geometries with a specified strategy. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Strategy>
strategy::distance::services::return_type<Strategy>::type distance (Geometry1 const &geometry1, Geometry2 const &geometry2, Strategy const &strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [first geometry type ] [geometry1] [first geometry ]]
[[Geometry2 const &] [second geometry type ] [geometry2] [second geometry ]]
[[Strategy const &] [] [strategy] [strategy to calculate distance between two points ]]
]


[heading Returns]
the distance 

[heading Description]


[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/distance.hpp>`



[endsect]

[section:distance_2 distance (2)]

Calculate distance between two geometries. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2>
distance_result<Geometry1, Geometry2>::type distance (Geometry1 const &geometry1, Geometry2 const &geometry2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [] [geometry1] [first geometry ]]
[[Geometry2 const &] [] [geometry2] [second geometry ]]
]


[heading Returns]
the distance (either a double or a distance result, convertable to double) 

[heading Description]
The default strategy is used, belonging to the corresponding coordinate system of the geometries 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/distance.hpp>`



[endsect]

