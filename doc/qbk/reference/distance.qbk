[/ Generated by doxygen_xml2qbk, don't change, it will be overwritten automatically]
[/ Generated from ../doxygen_output/xml/group__distance.xml]
[section:comparable_distance_2 comparable_distance]

Calculate the comparable distance measurement of two geometries. 

[heading Description]
The default strategy is used, belonging to the corresponding coordinate system of the geometries and the comparable strategy is used 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2>
distance_result<Geometry1, Geometry2>::type comparable_distance (Geometry1 const &geometry1, Geometry2 const &geometry2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [first geometry type ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [second geometry type ] [geometry2] [A model of the specified concept ]]
]


[heading Returns]
The calculated comparable distance 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/comparable_distance.hpp>`


[endsect]

[section:distance_2 distance]

Calculate the distance of two geometries. 

[heading Description]
The default strategy is used, belonging to the corresponding coordinate system of the geometries 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2>
distance_result<Geometry1, Geometry2>::type distance (Geometry1 const &geometry1, Geometry2 const &geometry2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
]


[heading Returns]
The calculated distance 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/distance.hpp>`


[endsect]

[section:distance_3 distance (with strategy)]

Calculate the distance of two geometries using the specified strategy. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Strategy>
strategy::distance::services::return_type<Strategy>::type distance (Geometry1 const &geometry1, Geometry2 const &geometry2, Strategy const &strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[Strategy const &] [Any type fulfilling a distance Strategy Concept ] [strategy] [The strategy which will be used for distance calculations ]]
]


[heading Returns]
The calculated distance 

[heading Header]
Either

`#include <boost/geometry/geometry.hpp>`

Or

`#include <boost/geometry/algorithms/distance.hpp>`


[endsect]

